-----------------------------------------------------------------------
| CHAPTER 1 - INTRO TO CLOUD MICROSERVICES                            |
-----------------------------------------------------------------------

- Microservices

    - Microservices = independently releasable services modeled around a business domain

        - Services available via networks
        - Type of SOA
        - Use whateer implementation and communication protocols are most appropriate
        - Avoid use of shared DBs
        - Embrace the concept of information hiding


    - Hexagonal Architecture (Alistair Cockburn, 2005)

        - Keep implementation separate from interfaces
        - You may want to interact with the same functionality over different interfaces



- Key Concepts of Microservices

    - Independent Deployability

        - Should be able to change and deploy without deploying other services
        - Microservices should be loosely coupled with explicit, well-defined, stable contacts


    - Modeled Around a Business Domain

        - Techniques such as DDD allow you to structure your code to represent the real world
        - 3-tiered architecture creates service boundaries based on technical functionality
        - Creating boundaries along business functionality increases cohesion


    - Owning Their Own State

        - Avoid use of shared databases, send a request if you need data from a service
        - Implementation can change freely as long as contract stays the same


    - Size

        - Service should be entirely understandable by one person
        - Goal is to have as small an interface as possible


    - Flexibility

        - Microservices buy you options, you must decide if the cost is worth it


    - Alignment of Architecture and Organization

        - Conway's Law = Organizations produce designs that are copies of the organization
        - 3-tiered architectures split teams on technical boundaries
        - But most changes we are asked to make relate to changes in business functionality



- The Monolith

    - The Single-Process Monolith

        - Monolith = All functionality in a system must be deployed together
        - Single-Process = All the code is packed into a single process
        - You may have multiple instances for robustness or scaling
        - Still usually distributed systems since they use a DB and present data to a UI
        - DHH made the case that this architecture makes sense for smaller organizations


    - The Modular Monolith

        - Single process consists of separate modules that can be worked on independently
        - Can be a good choice if module boundaries are well-defined
        - One challenge is that the DB tends to lack to decomposition at the code level


    - The Distributed Monolith

        - Multiple services, but the entire system must be deployed together
        - Disadvantages of distributed system and disadvantages of single-process monolith
        - Not enough focus on cohesion and information hiding


    - Monoliths and Delivery Contention

        - Developers get in each other's way, deployments become complicated
        - Confused lines of ownership


    - Advantages of Monoliths

        - Deployment topology is simple
        - Simpler development workflows, monitoring, troubleshooting, testing
        - Code reuse is simplified
        - Sensible default choice as an architectural style



- Enabling Technology

    - Log Aggregation and Distributed Tracing

        - Troubleshooting is more difficult in a distributed system
        - Collecting and aggregating logs from all services in a central place is essential
        - Correlation ids give a single id for a set of related calls (ie all calls for a user interaction)
        - Jaeger is a popular OSS tool for distributed tracing of performance
        - Lightstep and Honeycomb are more fully-featured tools for this


    - Containers and Kubernetes

        - Containers provide lightweight isolated execution environments
        - K8s provides container orchestration platform
        - K8s offers significant deployment advantages, but has overhead and steep learning curve
        - Using managed K8s service on cloud provider can save a lot of work


    - Streaming

        - Even though we don't use shared databases, we still need to share data between services
        - Orgs are moving away from batch reporting toward real-time feedback
        - Kafka is de facto choice for streaming data in a microservices environment
        - KSQLDB or Flink can provide stream-processing capabilities
        - Debezium is OSS tool for streaming data from existing datasources over Kafka


    - Public Cloud and Serverless

        - Huge array of managed services and deployment options is available
        - Using managed service offloads a lot of operational work to a third party better able to do it
        - Serverless = Hide underlying machines, higher level of abstraction



- Advantages of Microservices

    - Technology Heterogeneity

        - Can use the right tool for each job
        - For example, use Graph DB for social graph but store users in Document DB
        - Adapt more quickly to new technologies
        - Less risk when trying out new technologies
        - May still want to constrain this (ie only use JVM)


    - Robustness

        - One component can fail, but as long as failure doesn't cascade it won't take whole system down
        - Need to understand new types of failures associated with distributed systems
        - Need to understand and handle different types of failures


    - Scaling

        - Scale just the services that need scaling, instead of entire monolith
        - Allows us to control costs more effectively


    - Ease of Deployment

        - Releases in monoliths are high-risk and end up with large deltas
        - With microservices, we can quickly release frequently, and roll back if a problem occurs


    - Organizational Alignment

        - Smaller teams working on smaller codebases tend to be more productive
        - Microservices allow us to better align our architecture to our organization


    - Composability

        - Our functionality can be consumed differently in different ways (web, mobile, etc.)



- Microservice Pain Points

    - Developer Experience

        - It is impossible to run all the microservices on a single developer machine
        - This is especially true if you're using cloud services you can't deploy locally
        - Some people "develop entirely in the cloud", but feedback cycles suffer
        - The best solution is usually to limit the scope of parts a developer needs to work on


    - Technology Overload

        - It can be risky to adopt a bunch of new technologies while also switching to microservices
        - Each service can be written in a different language, but they don't need to be


    - Cost

        - In the short term, costs will rise, as you need to run more processes/VMs/network/storage
        - New feature development will also slow down at first
        - Microservices are not a great choice for an organization looking to cut costs


    - Reporting

        - You can't just join all the data together when it's stored in different places
        - More modern approaches such as streaming are necessary
        - Alternatively, you can just publish all your data into central reporting DBs or data lakes


    - Monitoring and Troubleshooting

        - A monolith is either all-up or all-down, while microservices can have partial failures
        - What is the impact if a single service goes down?


    - Security

        - Information now flows over networks between our services
        - We need to secure data both at rest and in transit


    - Testing

        - The scope of end-to-end tests becomes very large
        - Environmental issues, like service instances dying or network timeouts, can cause test failures
        - Contract-driven testing or just testing in production become more common


    - Latency

        - Data moves across a network instead of inside a single process
        - Move functionality to microservices incrementally, and use distributed tracing like Jaeger


    - Data Consistency

        - DB transactions can no longer be used, you need to use things like sagas and eventual consistency



- Should I Use Microservices?

    - When they don't work well

        - Brand-new products or startups where lots of iterating is happening and boundaries are fluid
        - Small teams that don't need to scale up yet
        - Installations that customers have to operate


    - When they work well

        - Large organizations with stable boundaries
        - SaaS applications that can benefit from rolling deployments and elastic scalability
        - Systems with varied requirements that can benefit from technology-agnostic nature