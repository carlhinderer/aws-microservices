-----------------------------------------------------------------------
| CHAPTER 2 - HOW TO MODEL MICROSERVICES                              |
-----------------------------------------------------------------------

- What Makes a Good Microservice Boundary?

    - Information Hiding

        - Desire to hide as many details as possible behind a module (or microservice)
        - Allows work to be done in parallel, resulting in improved development time
        - Each module can be looked at and understood in isolation, improving comprehensibility
        - Modules can be changed independently from one another, improving flexibility


    - Cohesion

        - Code that changes together should stay together, we want to make changes in one place
        - Making changes in lots of places at the same time is slow and risky
        - Strong cohesion = related behavior is in one place, loosely coupled with other services
        - Weak cohesion = related functionality is spread throughout the system


    - Coupling

        - When services are loosely coupled, changing one shouldn't require changing another
        - A service should know as little as possible about services it collaborates with
        - We should limit the number of different types of calls from one service to another
        - Chatty communication can lead to tight coupling


    - The Interplay of Coupling and Cohesion

        - Constantine's Law: "A structure is stable if cohesion is strong and coupling is low."
        - If a contract is changed in a backwards-incompatible way, all consumers also have to change
        - Cohesion relates to things inside a microservice
        - Coupling relates to things across services



- Types of Coupling

    - Coupling Basics

        - Some coupling is unavoidable, we just want to reduce the amount of coupling we have
        - Structured programming (1970s) provides the foundations of building modular software


    - Domain Coupling

        - This is the lowest/loosest form of coupling
        - In this case, one microservice needs to make use of the functionality another service provides
        - For example, the OrderProcessor calls Warehouse to reserve stock and Payment to take payment
        - OrderProcessor is dependent on Warehouse and Payment, but Warehouse and Payment have no coupling
        - This type of coupling is largely unavoidable
        - If one service talks to lots of other services, too much logic has been centralized
        - Can also become a problem if too much complex data is being sent between services


    - Temporal Coupling

        - Concepts are bundled together simply because they happen at the same time
        - One service needs another service to do something at the same time in order to complete
        - Both services need to be up and communicate
        - For example, the OrderProcessor makes a synchronous HTTP call to the Warehouse
        - To avoid this, use asychronous communication such as a message broker


    - Pass-Through Coupling

        - One service passes data to another purely because the data is needed by another service downstream
        - For example, OrderProcessor sends a shipping manifest to Warehouse, which forwards it to Shipping
        - If Shipping contract changes, OrderProcessor and Warehouse both need to change
        - Can be fixed by bypassing the intermediary, but then OrderProcessor has to talk to more services
        - Another solution is to hide the requirement for a shipping manifest from the OrderProcessor
        - Another solution is for the Warehouse to know nothing about the shipping manifest, treat it as blob


    - Common Coupling

        - This occurs when multiple services make use of a common set of data
        - This common data could be a shared DB, shared memory, or a shared filesystem
        - Changes to the structure of data can impact multiple services, makes DB difficult to change
        - For example, OrderProcessor and Warehouse both update 'Status' column of Order table
        - Problem is that one service's changes can break other service's view of the world
        - This is usually fine for static read-only reference data
        - One solution is to create finite state machine to manage transitions
        - Another solution is to let a single service manage the order state
        - For example, OrderProcessor and Warehouse can send update requests to Order service
        - If Order service is just CRUD with no business logic, you may have weak cohesion
        - Sources of common coupling are also often sources of resource contention (ie a slow DB)


    - Content Coupling

        - This is the highest/tightest form of coupling
        - An upstream service reaches into the internals of a downstream service and changes it's state
        - For example, one service directly accessing and changing another service's DB
        - OrderProcessor sends requests to Order, but Warehouse updates Order DB directly
        - Now we have to worry about other services when changing Order DB, information hiding is gone



- Just Enough DDD

    - Ubiquitous Language

        - This is the idea that we should strive to use the same terms in our code that users use
        - For example, in a corporate liquidity system, use terms like 'haircut' and 'end-of-day sweeps'


    - Aggregate

        - An 'aggregate' is a collection of objects managed as a single entity
        - For example, Order, Invoice, or StockItem
        - Typically a representation of a real-world domain concept
        - Typically have a life cycle around them, which opens them to being implemented as a state machine
        - Aggregate should reject illegal state transitions
        - Can have relationships with other aggregates (ie a Customer has one or more Orders)
        - Foreign-key relationships across service boundaries are difficult
        - To solve this, we can store ids from the other service
        - Another solution (if REST) is to store URLs to other entities instead of just ids


    - Bounded Context

        - This is a boundary within the business domain that provides functionality but hides complexity
        - This typically represents a larger organizational boundary
        - For example, Warehouse and Finance are separate contexts
        - Bounded contexts contain one or more aggregates
        - Bounded contexts have relationships with other bounded contexts, these are dependencies


    - Example - Warehouse Bounded Context and Finance Bounded Context (Hidden Models)

         [Warehouse]   [Shared Model]    [Finance]
         Shelf                           CompanyValuation
         StockItem ----> StockItem <---- StockReport
         PickList                  <---- LedgerEntry
         Picker
         Trolley

        - Finance needs to know about stock levels to keep accounts up to date
        - Only part of StockItem representation (the counts) needs to be exposed to Finance service


    - Shared Models

        - We can also have models that appear in more than one bounded context
        - For example, finance needs to know about payments made to a customer
        - Warehouse needs to know what packages have been sent to a customer to track deliveries
        - Since information is different, we can store information about the customer in both locations
        - We may still need to link both concepts to a global customer for shared info (ie name, email)

                Customer                  [Finance]
                   ^                       CustId           Amount
                   |                       -------------------------
                   ---------------------   /customer/141    $55.99


    - Mapping Aggregates and Bounded Contexts to Microservices

        - Both the aggregate and bounded context give us units of cohesion with well-defined interfaces
        - The aggregate is a self-contained state machine that focuses on a single domain concept
        - The bounded context is a collection of associated aggregates with an interface to the wider world
        - Both can work well as service boundaries
        - Start out by creating services that represent entire bounded contexts, can split later if needed
        - Note that you shouldn't split aggregates apart, want them to be managed by one service
        - Even if you split a service into multiple services, may want to keep single interface


    - Event Storming

        - 'Event storming' is a collaborative brainstorming exercise to help surface a domain model
        - Technical and nontechnical stakeholders participate to create shared view of the world
        - Get everyone together in the same room with whiteboards and sticky notes
        - First, identify all the domain events (ie 'Order placed' and 'Payment received')
        - Second, identify commands that cause these events to happen (ie 'User does something')
        - Third, identify the aggregates (ie 'Order')
        - Fourth, group the aggregates into bounded contexts



- The Case for DDD for Microservices

    - Bounded contexts are about hiding information, useful for defining clear boundaries
    - Using ubiquitious language helps when defining microservice endpoints
    - Puts the business domain at the heart of the software we build



- Alternatives to Business Domain Boundaries

    - Volatility

        - Volatility-based decomposition identifies parts of system going through more frequent change
        - These frequently changed parts go into their own services
        - "Bimodal IT" = Mode1 (systems of record) and Mode2 (systems of innovation)
        - Bimodal IT is overly simplistic, but this technique can be useful combined with other techniques


    - Data

        - For example, might want to put all PII or PCI-compliant data into separate service
        - This can reduce auditing costs


    - Technology

        - Maybe certain functionality needs different databases
        - Maybe certain functionality needs different PLs


    - Organizational

        - Company structure drives system architecture
        - What happens if the organization changes its structure?